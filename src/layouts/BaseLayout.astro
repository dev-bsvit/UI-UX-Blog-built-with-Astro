---
import '../styles/global.css';

export interface Props {
  title: string;
  description?: string;
  image?: string;
  article?: boolean;
  canonicalURL?: string;
  author?: string;
  publishedAt?: string;
  modifiedAt?: string;
  tags?: string[];
  category?: string;
}

const {
  title,
  description = 'Сучасний блог про UI/UX дизайн, інтерфейси та користувацький досвід',
  image = '/og-image.jpg',
  article = false,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  author = 'UI/UX Блог',
  publishedAt,
  modifiedAt,
  tags = [],
  category,
} = Astro.props;

const siteName = 'UI/UX Блог';
const siteUrl = Astro.site?.href || 'https://ui-ux-blog-bsvit.vercel.app/';

// Структурированные данные для статей
const structuredData = article ? {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "image": new URL(image, Astro.url).href,
  "author": {
    "@type": "Person",
    "name": author
  },
  "publisher": {
    "@type": "Organization",
    "name": siteName,
    "logo": {
      "@type": "ImageObject",
      "url": new URL('/logo.svg', Astro.url).href
    }
  },
  "datePublished": publishedAt,
  "dateModified": modifiedAt || publishedAt,
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL
  },
  "articleSection": category,
  "keywords": tags.join(', ')
} : {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "name": siteName,
  "description": description,
  "url": siteUrl,
  "potentialAction": {
    "@type": "SearchAction",
    "target": `${siteUrl}posts?search={search_term_string}`,
    "query-input": "required name=search_term_string"
  }
};
---

<!DOCTYPE html>
<html lang="uk" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- SEO Meta Tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalURL} />
    <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1" />
    
    <!-- Additional SEO -->
    <meta name="author" content={author} />
    <meta name="theme-color" content="#667eea" />
    <meta name="msapplication-TileColor" content="#667eea" />
    {tags.length > 0 && <meta name="keywords" content={tags.join(', ')} />}
    {category && <meta name="article:section" content={category} />}
    {publishedAt && <meta name="article:published_time" content={publishedAt} />}
    {modifiedAt && <meta name="article:modified_time" content={modifiedAt} />}
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={article ? 'article' : 'website'} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, Astro.url)} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:locale" content="uk_UA" />
    {publishedAt && <meta property="article:published_time" content={publishedAt} />}
    {modifiedAt && <meta property="article:modified_time" content={modifiedAt} />}
    {category && <meta property="article:section" content={category} />}
    {tags.map(tag => <meta property="article:tag" content={tag} />)}
    
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(image, Astro.url)} />
    <meta name="twitter:site" content="@uiux_blog" />
    <meta name="twitter:creator" content="@uiux_blog" />
    
    <!-- Web App Manifest -->
    <link rel="manifest" href="/manifest.json" />
    
    <!-- RSS Feed -->
    <link rel="alternate" type="application/rss+xml" title={`${siteName} RSS Feed`} href={`${siteUrl}rss.xml`} />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Theme initialization script -->
    <script is:inline>
      // Проверяем сохраненную тему или системные настройки
      if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    </script>

    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    
    <!-- Additional structured data for organization -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "UI/UX Блог",
      "url": "https://ui-ux-blog-bsvit.vercel.app/",
      "logo": "https://ui-ux-blog-bsvit.vercel.app/logo.svg",
      "description": "Сучасний блог про UI/UX дизайн, інтерфейси та користувацький досвід",
      "sameAs": [
        "https://github.com/dev-bsvit/UI-UX-Blog-built-with-Astro"
      ],
      "contactPoint": {
        "@type": "ContactPoint",
        "contactType": "customer support",
        "email": "editor@uiux-blog.ua"
      }
    }
    </script>
  </head>
  <body class="bg-gray-50 dark:bg-gray-950 text-gray-900 dark:text-gray-100 font-sans antialiased">
    <!-- Canvas для глобального эффекта искр -->
    <canvas id="global-spark-canvas" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 9999;"></canvas>
    
    <slot />
    
    <!-- Global Scripts -->
    <script>
      class GlobalClickSpark {
        constructor() {
          this.canvas = document.getElementById('global-spark-canvas');
          this.ctx = this.canvas.getContext('2d');
          
          this.options = {
            sparkColor: '#3B82F6', // Blue color
            sparkSize: 8,
            sparkRadius: 15,
            sparkCount: 6,
            duration: 300,
          };
          
          this.sparks = [];
          this.animationId = null;
          
          this.init();
        }
        
        init() {
          this.resizeCanvas();
          this.bindEvents();
          this.startAnimation();
        }
        
        resizeCanvas() {
          this.canvas.width = window.innerWidth;
          this.canvas.height = window.innerHeight;
        }
        
        bindEvents() {
          // Глобальный обработчик кликов
          document.addEventListener('click', (e) => {
            this.createSparks(e);
          });
          
          window.addEventListener('resize', () => {
            this.resizeCanvas();
          });
        }
        
        createSparks(e) {
          const x = e.clientX;
          const y = e.clientY;
          const now = performance.now();
          
          for (let i = 0; i < this.options.sparkCount; i++) {
            this.sparks.push({
              x,
              y,
              angle: (2 * Math.PI * i) / this.options.sparkCount,
              startTime: now
            });
          }
        }
        
        easeOut(t) {
          return t * (2 - t);
        }
        
        draw(timestamp) {
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          
          this.sparks = this.sparks.filter(spark => {
            const elapsed = timestamp - spark.startTime;
            if (elapsed >= this.options.duration) {
              return false;
            }
            
            const progress = elapsed / this.options.duration;
            const eased = this.easeOut(progress);
            
            const distance = eased * this.options.sparkRadius;
            const lineLength = this.options.sparkSize * (1 - eased);
            const opacity = 1 - progress;
            
            const x1 = spark.x + distance * Math.cos(spark.angle);
            const y1 = spark.y + distance * Math.sin(spark.angle);
            const x2 = spark.x + (distance + lineLength) * Math.cos(spark.angle);
            const y2 = spark.y + (distance + lineLength) * Math.sin(spark.angle);
            
            this.ctx.strokeStyle = this.options.sparkColor + Math.floor(opacity * 255).toString(16).padStart(2, '0');
            this.ctx.lineWidth = 2;
            this.ctx.beginPath();
            this.ctx.moveTo(x1, y1);
            this.ctx.lineTo(x2, y2);
            this.ctx.stroke();
            
            return true;
          });
        }
        
        startAnimation() {
          const animate = (timestamp) => {
            this.draw(timestamp);
            this.animationId = requestAnimationFrame(animate);
          };
          animate();
        }
        
        destroy() {
          if (this.animationId) {
            cancelAnimationFrame(this.animationId);
          }
        }
      }
      
      // Инициализация глобального эффекта искр
      document.addEventListener('DOMContentLoaded', () => {
        new GlobalClickSpark();
      });

      // Глобальные функции для уведомлений
      window.showNotification = function(message, isSuccess = true) {
        // Удаляем предыдущие уведомления
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(n => n.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transform transition-all duration-300 ${
          isSuccess 
            ? 'bg-green-500 text-white' 
            : 'bg-red-500 text-white'
        }`;
        notification.textContent = message;
        
        // Анимация появления
        notification.style.transform = 'translateX(100%)';
        document.body.appendChild(notification);
        
        requestAnimationFrame(() => {
          notification.style.transform = 'translateX(0)';
        });
        
        // Автоудаление через 3 секунды
        setTimeout(() => {
          notification.style.transform = 'translateX(100%)';
          setTimeout(() => {
            notification.remove();
          }, 300);
        }, 3000);
      };

      // Функция для обновления всех кнопок закладок на странице
      window.updateAllBookmarkButtons = function() {
        const user = JSON.parse(localStorage.getItem('user') || 'null');
        const allBookmarks = JSON.parse(localStorage.getItem('all_bookmarks') || '{}');
        
        document.querySelectorAll('.bookmark-button').forEach(button => {
          const postSlug = button.dataset.postSlug;
          if (!postSlug) return;
          
          const bookmarkIcon = button.querySelector('svg');
          const bookmarksCount = button.querySelector('.bookmarks-count');
          const totalBookmarks = allBookmarks[postSlug] || 0;
          
          if (user) {
            const userBookmarks = JSON.parse(localStorage.getItem(`user_bookmarks_${user.uid}`) || '[]');
            const isBookmarked = userBookmarks.includes(postSlug);
            
            if (isBookmarked) {
              bookmarkIcon.style.fill = '#3b82f6';
              bookmarkIcon.style.stroke = '#3b82f6';
              button.classList.add('bookmarked');
            } else {
              bookmarkIcon.style.fill = 'none';
              bookmarkIcon.style.stroke = 'currentColor';
              button.classList.remove('bookmarked');
            }
          } else {
            bookmarkIcon.style.fill = 'none';
            bookmarkIcon.style.stroke = 'currentColor';
            button.classList.remove('bookmarked');
          }
          
          if (bookmarksCount) {
            bookmarksCount.textContent = totalBookmarks;
          }
        });
      };

      // Обновляем кнопки при изменении авторизации
      window.addEventListener('userAuthChanged', () => {
        if (window.updateAllBookmarkButtons) {
          window.updateAllBookmarkButtons();
        }
      });

      // Первоначальное обновление кнопок
      document.addEventListener('DOMContentLoaded', () => {
        if (window.updateAllBookmarkButtons) {
          window.updateAllBookmarkButtons();
        }
      });
    </script>
  </body>
</html> 