---
import { getCollection } from 'astro:content';
import LayoutWithSidebar from '../layouts/LayoutWithSidebar.astro';
import PostCard from '../components/PostCard.astro';

// Отримуємо всі пости
const allPosts = await getCollection('posts');

// Сортуємо пости за датою (найновіші спочатку)
const sortedPosts = allPosts.sort((a, b) => 
  new Date(b.data.publishedAt).getTime() - new Date(a.data.publishedAt).getTime()
);

// Для вкладки "Популярне" (поки що просто беремо featured)
const popularPosts = sortedPosts.filter(post => post.data.featured);
---

<LayoutWithSidebar
  title="UI/UX Блог"
  description="Сучасний блог про UI/UX дизайн, інтерфейси та користувацький досвід"
  currentPath="/"
>
  <!-- Контент сторінки -->
  <div>
    <!-- Статті -->
    <div class="grid grid-cols-1 gap-4">
      {sortedPosts.map((post) => (
        <PostCard
          post={post}
          featured={post.data.featured}
        />
      ))}
    </div>
  </div>
</LayoutWithSidebar>

<script>
  // Function to clear corrupted bookmark data (temporary for debugging)
  function clearBookmarksData() {
    const user = JSON.parse(localStorage.getItem('user') || 'null');
    if (user) {
      localStorage.removeItem('user_bookmarks_' + user.uid);
    }
    localStorage.removeItem('all_bookmarks');
    console.log('Bookmarks data cleared');
    location.reload();
  }
  (window as any).clearBookmarksData = clearBookmarksData;

  // Function to show notifications
  function showNotification(message: string, isSuccess: boolean = true) {
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg flex items-center space-x-2 text-white';
    if (isSuccess) {
      notification.classList.add('bg-green-500');
    } else {
      notification.classList.add('bg-red-500');
    }
    const icon = document.createElement('svg');
    icon.className = 'w-5 h-5';
    icon.setAttribute('fill', 'none');
    icon.setAttribute('stroke', 'currentColor');
    icon.setAttribute('viewBox', '0 0 24 24');
    const path = document.createElement('path');
    path.setAttribute('stroke-linecap', 'round');
    path.setAttribute('stroke-linejoin', 'round');
    path.setAttribute('stroke-width', '2');
    if (isSuccess) {
      path.setAttribute('d', 'M5 13l4 4L19 7');
    } else {
      path.setAttribute('d', 'M6 18L18 6M6 6l12 12');
    }
    icon.appendChild(path);
    const span = document.createElement('span');
    span.textContent = message;
    notification.appendChild(icon);
    notification.appendChild(span);
    document.body.appendChild(notification);
    setTimeout(function() {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 3000);
  }

  // Initialize Bookmarks
  function initializeBookmarks() {
    console.log('Initializing bookmarks on homepage...');
    const bookmarkButtons = document.querySelectorAll('.bookmark-button');
    
    bookmarkButtons.forEach(button => {
      const postSlug = button.getAttribute('data-post-slug');
      if (!postSlug) return;
      
      // Click handler for bookmark buttons
      button.addEventListener('click', function(e) {
        e.preventDefault();
        e.stopPropagation();
        
        const user = JSON.parse(localStorage.getItem('user') || 'null');
        if (!user) {
          showNotification('Будь ласка, увійдіть для використання закладок', false);
          return;
        }
        
        const userBookmarksKey = `user_bookmarks_${user.uid}`;
        const userBookmarks = JSON.parse(localStorage.getItem(userBookmarksKey) || '[]');
        const allBookmarks = JSON.parse(localStorage.getItem('all_bookmarks') || '{}');
        
        let updatedUserBookmarks;
        let updatedAllBookmarks = { ...allBookmarks };
        
        if (userBookmarks.includes(postSlug)) {
          // Remove bookmark
          updatedUserBookmarks = userBookmarks.filter((slug: string) => slug !== postSlug);
          updatedAllBookmarks[postSlug] = Math.max(0, (updatedAllBookmarks[postSlug] || 0) - 1);
          showNotification('Закладку видалено');
        } else {
          // Add bookmark
          updatedUserBookmarks = [...userBookmarks, postSlug];
          updatedAllBookmarks[postSlug] = (updatedAllBookmarks[postSlug] || 0) + 1;
          showNotification('Додано до закладок');
        }
        
        // Save to localStorage
        localStorage.setItem(userBookmarksKey, JSON.stringify(updatedUserBookmarks));
        localStorage.setItem('all_bookmarks', JSON.stringify(updatedAllBookmarks));
        
        // Update UI
        updateAllBookmarkButtons();
      });
    });
    
    // Initial update
    updateAllBookmarkButtons();
  }

  // Update all bookmark buttons on the page
  function updateAllBookmarkButtons() {
    const user = JSON.parse(localStorage.getItem('user') || 'null');
    const allBookmarks = JSON.parse(localStorage.getItem('all_bookmarks') || '{}');
    
    document.querySelectorAll('.bookmark-button').forEach(button => {
      const postSlug = button.getAttribute('data-post-slug');
      if (!postSlug) return;
      
      const bookmarkIcon = button.querySelector('.bookmark-icon') as HTMLElement;
      const bookmarksCount = button.querySelector('.bookmarks-count');
      
      if (bookmarksCount) {
        const totalBookmarks = allBookmarks[postSlug] || 0;
        bookmarksCount.textContent = totalBookmarks.toString();
      }
      
      if (user && bookmarkIcon) {
        const userBookmarks = JSON.parse(localStorage.getItem(`user_bookmarks_${user.uid}`) || '[]');
        if (userBookmarks.includes(postSlug)) {
          bookmarkIcon.style.fill = '#3b82f6';
          bookmarkIcon.style.stroke = '#3b82f6';
        } else {
          bookmarkIcon.style.fill = 'none';
          bookmarkIcon.style.stroke = 'currentColor';
        }
      }
    });
  }

  // Initialize on DOMContentLoaded
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing bookmarks...');
    initializeBookmarks();
  });

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      console.log('DOM loading - initializing...');
      initializeBookmarks();
    });
  } else {
    console.log('DOM already loaded - initializing immediately...');
    initializeBookmarks();
  }
</script>

 