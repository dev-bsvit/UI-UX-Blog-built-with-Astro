---
import { getCollection } from 'astro:content';
import LayoutWithSidebar from '../layouts/LayoutWithSidebar.astro';
import PostCard from '../components/PostCard.astro';

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
const allPosts = await getCollection('posts', ({ data }) => !data.draft);

// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
const sortedPosts = allPosts.sort((a, b) => 
  new Date(b.data.publishedAt).getTime() - new Date(a.data.publishedAt).getTime()
);

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
const postsByCategory = sortedPosts.reduce((acc, post) => {
  const category = post.data.category || '–ó–∞–≥–∞–ª—å–Ω–µ';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(post);
  return acc;
}, {} as Record<string, typeof sortedPosts>);

// –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
const allTags = [...new Set(sortedPosts.flatMap(post => post.data.tags || []))];
---

<LayoutWithSidebar 
  title="–í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ | UI/UX –ë–ª–æ–≥" 
  description="–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –Ω–∞—à–æ–≥–æ –±–ª–æ–≥—É –ø—Ä–æ UI/UX –¥–∏–∑–∞–π–Ω, –≤–µ–±-—Ä–æ–∑—Ä–æ–±–∫—É —Ç–∞ —Å—É—á–∞—Å–Ω—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó" 
  currentPath="/posts"
>
  <!-- Hero —Å–µ–∫—Ü–∏—è -->
  <section class="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-3xl p-8 mb-8">
    <div class="max-w-4xl">
      <h1 class="text-4xl md:text-5xl font-bold mb-4">
        –í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ –±–ª–æ–≥—É üìö
      </h1>
      <p class="text-xl mb-6 opacity-90">
        –ó–Ω–∞–π–¥—ñ—Ç—å —Ü—ñ–∫–∞–≤—ñ —Å—Ç–∞—Ç—Ç—ñ –ø—Ä–æ –¥–∏–∑–∞–π–Ω, UX-–¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è, —Ä–æ–∑—Ä–æ–±–∫—É —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–æ–≥–æ. –í—Å—å–æ–≥–æ —Å—Ç–∞—Ç–µ–π: {sortedPosts.length}
      </p>
      <div class="flex flex-wrap gap-4">
        <a href="#latest" class="bg-white text-blue-600 px-6 py-3 rounded-lg font-medium hover:bg-gray-100 transition-colors">
          –û—Å—Ç–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ
        </a>
        <a href="#categories" class="border border-white/30 px-6 py-3 rounded-lg font-medium hover:bg-white/10 transition-colors">
          –ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
        </a>
      </div>
    </div>
  </section>

  <!-- –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ -->
  <div class="mb-8">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
      <div class="flex flex-wrap gap-2">
        <button class="filter-btn active px-4 py-2 rounded-lg bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 font-medium" data-filter="all">
          –í—Å—ñ ({sortedPosts.length})
        </button>
        {Object.entries(postsByCategory).map(([category, posts]) => (
          <button 
            class="filter-btn px-4 py-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 font-medium hover:bg-gray-200 dark:hover:bg-gray-700" 
            data-filter={category.toLowerCase()}
          >
            {category} ({posts.length})
          </button>
        ))}
      </div>
      
      <div class="relative">
        <input 
          type="text" 
          id="search-input"
          placeholder="–ü–æ—à—É–∫ —Å—Ç–∞—Ç–µ–π..."
          class="w-full md:w-80 px-4 py-2 pl-10 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
        />
        <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
    </div>

    <!-- –¢–µ–≥–∏ -->
    <div class="flex flex-wrap gap-2 mb-6">
      <span class="text-sm font-medium text-gray-700 dark:text-gray-300 mr-2">–¢–µ–≥–∏:</span>
      {allTags.slice(0, 10).map(tag => (
        <button 
          class="tag-btn px-3 py-1 text-xs bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 rounded-full hover:bg-purple-100 dark:hover:bg-purple-900 hover:text-purple-600 dark:hover:text-purple-300 transition-colors"
          data-tag={tag}
        >
          #{tag}
        </button>
      ))}
      {allTags.length > 10 && (
        <button class="px-3 py-1 text-xs text-purple-600 dark:text-purple-400 hover:underline">
          +{allTags.length - 10} –±—ñ–ª—å—à–µ
        </button>
      )}
    </div>
  </div>

  <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ -->
  <div id="search-results" class="hidden mb-6">
    <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-4">
      –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É: <span id="search-term"></span>
    </h2>
    <div id="search-posts" class="grid grid-cols-1 gap-4">
      <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å -->
    </div>
  </div>

  <!-- –í—Å–µ —Å—Ç–∞—Ç—å–∏ -->
  <div id="all-posts">
    <h2 id="posts-title" class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">–û—Å—Ç–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ</h2>
    
    <div id="posts-grid" class="grid grid-cols-1 gap-4">
      {sortedPosts.map((post) => (
        <div class="post-item" data-category={post.data.category?.toLowerCase() || '–∑–∞–≥–∞–ª—å–Ω–µ'} data-tags={JSON.stringify(post.data.tags || [])}>
          <PostCard post={post} />
        </div>
      ))}
    </div>

    <!-- –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è) -->
    <div id="pagination" class="mt-12 flex justify-center">
      <div class="flex items-center space-x-2">
        <button class="px-4 py-2 text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 disabled:opacity-50" disabled>
          ‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—è
        </button>
        <span class="px-4 py-2 bg-purple-600 text-white rounded-lg">1</span>
        <button class="px-4 py-2 text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 disabled:opacity-50" disabled>
          –ù–∞—Å—Ç—É–ø–Ω–∞ ‚Üí
        </button>
      </div>
    </div>
  </div>

  <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ -->
  <div class="mt-12 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg">
    <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥—É</h3>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
      <div class="text-center">
        <div class="text-2xl font-bold text-purple-600 dark:text-purple-400">{sortedPosts.length}</div>
        <div class="text-sm text-gray-600 dark:text-gray-400">–°—Ç–∞—Ç–µ–π</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{Object.keys(postsByCategory).length}</div>
        <div class="text-sm text-gray-600 dark:text-gray-400">–ö–∞—Ç–µ–≥–æ—Ä—ñ–π</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-green-600 dark:text-green-400">{allTags.length}</div>
        <div class="text-sm text-gray-600 dark:text-gray-400">–¢–µ–≥—ñ–≤</div>
      </div>
      <div class="text-center">
        <div class="text-2xl font-bold text-orange-600 dark:text-orange-400">‚àû</div>
        <div class="text-sm text-gray-600 dark:text-gray-400">–Ü–¥–µ–π</div>
      </div>
    </div>
  </div>
</LayoutWithSidebar>

<script define:vars={{ allPosts: sortedPosts }}>
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const tagButtons = document.querySelectorAll('.tag-btn');
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const allPostsSection = document.getElementById('all-posts');
    const postsGrid = document.getElementById('posts-grid');
    const postsTitle = document.getElementById('posts-title');
    const searchTerm = document.getElementById('search-term');
    const searchPosts = document.getElementById('search-posts');

    let currentFilter = 'all';
    let currentTag = '';
    let searchQuery = '';

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.dataset.filter;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        filterButtons.forEach(btn => {
          btn.classList.remove('active', 'bg-purple-100', 'dark:bg-purple-900', 'text-purple-800', 'dark:text-purple-200');
          btn.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300');
        });
        
        button.classList.add('active', 'bg-purple-100', 'dark:bg-purple-900', 'text-purple-800', 'dark:text-purple-200');
        button.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'text-gray-700', 'dark:text-gray-300');
        
        currentFilter = filter;
        filterPosts();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (postsTitle) {
          postsTitle.textContent = filter === 'all' ? '–í—Å—ñ —Å—Ç–∞—Ç—Ç—ñ' : `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${button.textContent.split(' (')[0]}`;
        }
      });
    });

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–≥–∞–º
    tagButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tag = button.dataset.tag;
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (currentTag === tag) {
          currentTag = '';
          button.classList.remove('bg-purple-100', 'dark:bg-purple-900', 'text-purple-600', 'dark:text-purple-300');
          button.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');
        } else {
          // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö —Ç–µ–≥–æ–≤
          tagButtons.forEach(btn => {
            btn.classList.remove('bg-purple-100', 'dark:bg-purple-900', 'text-purple-600', 'dark:text-purple-300');
            btn.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');
          });
          
          currentTag = tag;
          button.classList.add('bg-purple-100', 'dark:bg-purple-900', 'text-purple-600', 'dark:text-purple-300');
          button.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');
        }
        
        filterPosts();
      });
    });

    // –ü–æ–∏—Å–∫
    let searchTimeout;
    searchInput?.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        searchQuery = e.target.value.trim().toLowerCase();
        
        if (searchQuery) {
          showSearchResults();
        } else {
          hideSearchResults();
        }
      }, 300);
    });

    // –§—É–Ω–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    function filterPosts() {
      const postItems = document.querySelectorAll('.post-item');
      
      postItems.forEach(item => {
        const category = item.dataset.category;
        const tags = JSON.parse(item.dataset.tags || '[]');
        
        let showPost = true;
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if (currentFilter !== 'all' && category !== currentFilter) {
          showPost = false;
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥—É
        if (currentTag && !tags.includes(currentTag)) {
          showPost = false;
        }
        
        if (showPost) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    }

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
    function showSearchResults() {
      const results = allPosts.filter(post => {
        const title = post.data.title.toLowerCase();
        const description = (post.data.description || post.data.excerpt || '').toLowerCase();
        const tags = (post.data.tags || []).join(' ').toLowerCase();
        
        return title.includes(searchQuery) || 
               description.includes(searchQuery) || 
               tags.includes(searchQuery);
      });

      if (searchTerm) {
        searchTerm.textContent = `"${searchInput.value}"`;
      }

      if (searchPosts) {
        if (results.length === 0) {
          searchPosts.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-center py-8">–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>';
        } else {
          searchPosts.innerHTML = results.map(post => `
            <div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 hover:border-purple-300 dark:hover:border-purple-600 transition-colors">
              <div class="flex items-start space-x-4">
                ${post.data.cover ? `
                  <img src="${post.data.cover}" alt="${post.data.title}" class="w-24 h-24 object-cover rounded-lg flex-shrink-0">
                ` : ''}
                <div class="flex-1 min-w-0">
                  <h3 class="text-lg font-bold text-gray-900 dark:text-white mb-2">
                    <a href="/posts/${post.slug}" class="hover:text-purple-600 dark:hover:text-purple-400">
                      ${post.data.title}
                    </a>
                  </h3>
                  <p class="text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2">
                    ${post.data.description || post.data.excerpt || ''}
                  </p>
                  <div class="flex items-center space-x-4 text-xs text-gray-500 dark:text-gray-400">
                    <span>${post.data.readingTime}</span>
                    <span>‚Ä¢</span>
                    <span>${post.data.category}</span>
                    ${post.data.tags && post.data.tags.length > 0 ? `
                      <span>‚Ä¢</span>
                      <div class="flex flex-wrap gap-1">
                        ${post.data.tags.slice(0, 3).map(tag => `<span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded">#${tag}</span>`).join('')}
                      </div>
                    ` : ''}
                  </div>
                </div>
              </div>
            </div>
          `).join('');
        }
      }

      searchResults?.classList.remove('hidden');
      allPostsSection?.classList.add('hidden');
    }

    function hideSearchResults() {
      searchResults?.classList.add('hidden');
      allPostsSection?.classList.remove('hidden');
    }
  });
</script> 