---
interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
  <div class="max-w-4xl mx-auto">
    <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">
      –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ <span id="comments-count" class="text-gray-500 dark:text-gray-400 text-lg font-normal">(0)</span>
    </h3>

    <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è -->
    <div class="mb-8 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg">
      <div id="auth-required" class="hidden text-center py-8">
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          –î–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        </p>
        <button 
          onclick="window.signInWithGoogle?.()"
          class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
        >
          –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
        </button>
      </div>

      <form id="comment-form" class="hidden">
        <div class="mb-4">
          <label for="comment-content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä
          </label>
          <textarea 
            id="comment-content" 
            name="content" 
            rows="4" 
            required
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä..."
          ></textarea>
        </div>

        <div class="flex justify-between items-center">
          <div class="text-sm text-gray-500 dark:text-gray-400">
            <span id="user-name-display"></span>
            <div class="mt-1 text-xs">
              üí° –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—î—é
            </div>
          </div>
          <div class="flex space-x-3">
            <button 
              type="button" 
              id="cancel-comment"
              class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
            >
              –°–∫–∞—Å—É–≤–∞—Ç–∏
            </button>
            <button 
              type="submit"
              class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
            >
              –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏
            </button>
          </div>
        </div>
      </form>
    </div>

    <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ -->
    <div id="moderation-notice" class="hidden mb-6 p-4 bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800 rounded-lg">
      <div class="flex items-center">
        <div class="text-2xl mr-3">‚è≥</div>
        <div>
          <h4 class="font-medium text-orange-800 dark:text-orange-200">
            –ö–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
          </h4>
          <p class="text-sm text-orange-600 dark:text-orange-300">
            –í–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
          </p>
        </div>
      </div>
    </div>

    <!-- Admin notice -->
    <div id="admin-notice" class="hidden mb-6 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <div class="text-2xl mr-3">üõ°Ô∏è</div>
          <div>
            <h4 class="font-medium text-blue-800 dark:text-blue-200">
              –†–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            </h4>
            <p class="text-sm text-blue-600 dark:text-blue-300">
              –í–∏ –±–∞—á–∏—Ç–µ –≤—Å—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ, –≤–∫–ª—é—á–∞—é—á–∏ —Ç—ñ, —â–æ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            </p>
          </div>
        </div>
        <a 
          href="/admin/comments" 
          class="px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white rounded text-sm transition-colors"
        >
          –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        </a>
      </div>
    </div>

    <!-- –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ -->
    <div id="comments-list" class="space-y-6">
      <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
    </div>

    <!-- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ -->
    <div id="comments-loading" class="text-center py-8">
      <p class="text-gray-500 dark:text-gray-400">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤...</p>
    </div>

    <!-- –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ -->
    <div id="comments-empty" class="hidden text-center py-8">
      <p class="text-gray-500 dark:text-gray-400">–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º!</p>
    </div>
  </div>
</section>

<script define:vars={{ postSlug }}>
  document.addEventListener('DOMContentLoaded', () => {
    const commentForm = document.getElementById('comment-form');
    const authRequired = document.getElementById('auth-required');
    const commentsList = document.getElementById('comments-list');
    const commentsLoading = document.getElementById('comments-loading');
    const commentsEmpty = document.getElementById('comments-empty');
    const commentsCount = document.getElementById('comments-count');
    const userNameDisplay = document.getElementById('user-name-display');
    const cancelButton = document.getElementById('cancel-comment');
    const contentTextarea = document.getElementById('comment-content');
    const moderationNotice = document.getElementById('moderation-notice');
    const adminNotice = document.getElementById('admin-notice');

    let currentUser = null;
    let comments = [];
    let isAdmin = false;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    function checkAuth() {
      const user = JSON.parse(localStorage.getItem('user') || 'null');
      currentUser = user;
      
      // Simple admin check
      const adminEmails = ['admin@example.com', 'bsvit@example.com'];
      isAdmin = user && (adminEmails.includes(user.email) || user.email.includes('admin'));
      
      if (user) {
        authRequired?.classList.add('hidden');
        commentForm?.classList.remove('hidden');
        if (userNameDisplay) {
          userNameDisplay.textContent = `–ö–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ —è–∫ ${user.displayName}`;
        }
        
        // Show admin notice if user is admin
        if (isAdmin) {
          adminNotice?.classList.remove('hidden');
        }
      } else {
        authRequired?.classList.remove('hidden');
        commentForm?.classList.add('hidden');
        adminNotice?.classList.add('hidden');
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ localStorage
    function loadComments() {
      commentsLoading?.classList.remove('hidden');
      commentsEmpty?.classList.add('hidden');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ localStorage
      const allComments = JSON.parse(localStorage.getItem('comments') || '{}');
      const postComments = allComments[postSlug] || [];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      comments = postComments.filter((comment: any) => {
        // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (isAdmin) return true;
        
        // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        return comment.status === 'approved' || !comment.status; // —Å—Ç–∞—Ä—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–∏—Ç–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏
      }).sort((a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime());
      
      setTimeout(() => {
        commentsLoading?.classList.add('hidden');
        renderComments();
      }, 500);
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    function renderComments() {
      if (!commentsList) return;

      if (comments.length === 0) {
        commentsEmpty?.classList.remove('hidden');
        commentsList.innerHTML = '';
      } else {
        commentsEmpty?.classList.add('hidden');
        commentsList.innerHTML = comments.map((comment: any) => renderComment(comment)).join('');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
      if (commentsCount) {
        commentsCount.textContent = `(${comments.length})`;
      }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    function renderComment(comment: any) {
      const date = new Date(comment.createdAt).toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      const statusBadge = isAdmin && comment.status ? `
        <span class="px-2 py-1 rounded-full text-xs font-medium ${
          comment.status === 'pending' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' :
          comment.status === 'approved' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
          'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
        }">
          ${comment.status === 'pending' ? '‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó' : 
            comment.status === 'approved' ? '‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ' : '‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ'}
        </span>
      ` : '';

      return `
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 ${
          comment.status === 'pending' ? 'border-orange-200 dark:border-orange-800 bg-orange-50 dark:bg-orange-900/10' : ''
        }">
          <div class="flex items-start space-x-4">
            <div class="flex-shrink-0">
              <div class="w-10 h-10 bg-purple-600 rounded-full flex items-center justify-center">
                <span class="text-white font-medium text-sm">
                  ${comment.authorName.charAt(0).toUpperCase()}
                </span>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center space-x-2 mb-2">
                <h4 class="text-sm font-medium text-gray-900 dark:text-white">
                  ${comment.authorName}
                </h4>
                <span class="text-xs text-gray-500 dark:text-gray-400">
                  ${date}
                </span>
                ${statusBadge}
              </div>
              <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
                ${comment.content}
              </p>
              <div class="flex items-center space-x-4 mt-3">
                <button class="like-comment-btn text-xs text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 flex items-center space-x-1" data-comment-id="${comment.id}">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                  </svg>
                  <span class="likes-count">${comment.likesCount || 0}</span>
                </button>
                <button class="reply-btn text-xs text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400" data-comment-id="${comment.id}">
                  –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    async function addComment(content: string) {
      if (!currentUser) {
        alert('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤');
        return;
      }

      const newComment = {
        id: Math.random().toString(36).substring(2) + Date.now().toString(36),
        postSlug: postSlug,
        content: content.trim(),
        authorName: currentUser.displayName,
        authorEmail: currentUser.email,
        createdAt: new Date().toISOString(),
        status: 'pending', // –ù–æ–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        likesCount: 0
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      const allComments = JSON.parse(localStorage.getItem('comments') || '{}');
      if (!allComments[postSlug]) {
        allComments[postSlug] = [];
      }
      allComments[postSlug].push(newComment);
      localStorage.setItem('comments', JSON.stringify(allComments));

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
      moderationNotice?.classList.remove('hidden');
      setTimeout(() => {
        moderationNotice?.classList.add('hidden');
      }, 5000);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      loadComments();

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      if (contentTextarea) {
        contentTextarea.value = '';
      }

      return newComment;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    commentForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(commentForm);
      const content = formData.get('content')?.toString().trim();
      
      if (!content) {
        alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
        return;
      }

      try {
        await addComment(content);
      } catch (error) {
        console.error('Error adding comment:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—è');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    cancelButton?.addEventListener('click', () => {
      if (contentTextarea) {
        contentTextarea.value = '';
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–∞–π–∫–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π)
    commentsList?.addEventListener('click', (e) => {
      if (e.target.closest('.like-comment-btn')) {
        const button = e.target.closest('.like-comment-btn');
        const commentId = button.dataset.commentId;
        const likesCountElement = button.querySelector('.likes-count');
        
        if (!currentUser) {
          alert('–ü–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
          return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userLikes = JSON.parse(localStorage.getItem(`user_comment_likes_${currentUser.uid}`) || '[]');
        const isLiked = userLikes.includes(commentId);
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–∏–µ –ª–∞–π–∫–∏
        const allLikes = JSON.parse(localStorage.getItem('all_comment_likes') || '{}');
        
        if (isLiked) {
          // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
          const updatedUserLikes = userLikes.filter((id: string) => id !== commentId);
          const updatedAllLikes = { ...allLikes };
          updatedAllLikes[commentId] = Math.max(0, (updatedAllLikes[commentId] || 0) - 1);
          
          localStorage.setItem(`user_comment_likes_${currentUser.uid}`, JSON.stringify(updatedUserLikes));
          localStorage.setItem('all_comment_likes', JSON.stringify(updatedAllLikes));
          
          button.classList.remove('liked');
          if (likesCountElement) {
            likesCountElement.textContent = updatedAllLikes[commentId].toString();
          }
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
          const updatedUserLikes = [...userLikes, commentId];
          const updatedAllLikes = { ...allLikes };
          updatedAllLikes[commentId] = (updatedAllLikes[commentId] || 0) + 1;
          
          localStorage.setItem(`user_comment_likes_${currentUser.uid}`, JSON.stringify(updatedUserLikes));
          localStorage.setItem('all_comment_likes', JSON.stringify(updatedAllLikes));
          
          button.classList.add('liked');
          if (likesCountElement) {
            likesCountElement.textContent = updatedAllLikes[commentId].toString();
          }
        }
      }
    });

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    window.addEventListener('userAuthChanged', () => {
      checkAuth();
      loadComments(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    checkAuth();
    loadComments();
  });
</script>

<style>
  .liked {
    color: #dc2626 !important;
  }
  
  .liked svg {
    fill: currentColor;
  }
</style> 