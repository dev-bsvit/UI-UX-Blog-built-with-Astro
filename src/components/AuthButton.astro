---
// AuthButton.astro
---

<div class="flex items-center gap-4">
  <!-- Кнопка входа -->
  <button
    id="login-btn"
    class="hidden px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
  >
    Увійти через Google
  </button>

  <!-- Информация о пользователе -->
  <div id="user-info" class="hidden flex items-center gap-3">
    <img
      id="user-avatar"
      src=""
      alt="User Avatar"
      class="w-8 h-8 rounded-full"
    />
    <span id="user-name" class="text-gray-900 dark:text-white"></span>
    <button
      id="logout-btn"
      class="px-3 py-1 text-sm bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
    >
      Вийти
    </button>
  </div>
</div>

<script>
  import { auth, signInWithGoogle, signOutGoogle } from '../lib/firebase';
  import { onAuthStateChanged } from 'firebase/auth';

  const loginBtn = document.getElementById('login-btn');
  const logoutBtn = document.getElementById('logout-btn');
  const userInfoDiv = document.getElementById('user-info');
  const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
  const userName = document.getElementById('user-name');

  // Обработчик входа
  loginBtn?.addEventListener('click', async () => {
    try {
      const user = await signInWithGoogle();
      console.log('User logged in:', user);
    } catch (error) {
      console.error('Login failed:', error);
    }
  });

  // Обработчик выхода
  logoutBtn?.addEventListener('click', async () => {
    try {
      await signOutGoogle();
      console.log('User logged out');
    } catch (error) {
      console.error('Logout failed:', error);
    }
  });

  // Отслеживание состояния авторизации
  onAuthStateChanged(auth, (user) => {
    if (user) {
      // Пользователь вошел
      loginBtn?.classList.add('hidden');
      userInfoDiv?.classList.remove('hidden');
      if (userAvatar) userAvatar.src = user.photoURL || '';
      if (userName) userName.textContent = user.displayName || 'User';
      localStorage.setItem('user', JSON.stringify({
        uid: user.uid,
        displayName: user.displayName,
        photoURL: user.photoURL,
        email: user.email
      }));

      // Генерируем кастомное событие
      window.dispatchEvent(new CustomEvent('userAuthChanged', { detail: { user } }));
    } else {
      // Пользователь вышел
      loginBtn?.classList.remove('hidden');
      userInfoDiv?.classList.add('hidden');
      localStorage.removeItem('user');

      // Генерируем кастомное событие
      window.dispatchEvent(new CustomEvent('userAuthChanged', { detail: { user: null } }));
    }
  });

  // Проверяем состояние при загрузке страницы
  const storedUser = localStorage.getItem('user');
  if (storedUser) {
    const user = JSON.parse(storedUser);
    loginBtn?.classList.add('hidden');
    userInfoDiv?.classList.remove('hidden');
    if (userAvatar) userAvatar.src = user.photoURL || '';
    if (userName) userName.textContent = user.displayName || 'User';
  }
</script> 