name: 🚀 Deploy Blog to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 20
  PNPM_VERSION: 8.15.0

jobs:
  # Проверка качества кода и тестирование
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🗄️ Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🔄 Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 TypeScript check
        run: pnpm run type-check

      - name: 🎨 Lint check
        run: pnpm run lint

      - name: 💅 Format check
        run: pnpm run format --check

      - name: 🏗️ Build check
        run: pnpm run build

  # Lighthouse CI для проверки производительности
  lighthouse:
    name: 🌟 Lighthouse CI
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build site
        run: pnpm run build

      - name: 🌟 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: ./lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Деплой в продакшн
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, lighthouse]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build site
        run: pnpm run build
        env:
          # Переменные окружения для продакшна
          PUBLIC_SITE_URL: ${{ secrets.SITE_URL }}
          GOOGLE_INDEXING_KEY: ${{ secrets.GOOGLE_INDEXING_KEY }}

      - name: 🚀 Deploy to Vercel/Netlify
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}

      # Альтернативный деплой в Netlify
      # - name: 🚀 Deploy to Netlify
      #   uses: nwtgck/actions-netlify@v2.1
      #   with:
      #     publish-dir: './dist'
      #     production-branch: main
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions"
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Индексация в Google
  google-indexing:
    name: 📊 Google Indexing
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📊 Trigger Google Indexing
        run: |
          node scripts/google-indexing.js
        env:
          GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          SITE_URL: ${{ secrets.SITE_URL }}

      - name: 🔔 Notify completion
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,workflow,job,took

  # Очистка и оптимизация
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy, google-indexing]
    if: always()
    
    steps:
      - name: 🧹 Clean up artifacts
        run: |
          echo "Cleaning up temporary files..."
          # Здесь можно добавить команды очистки

      - name: 📊 Update deployment status
        run: |
          echo "Deployment completed successfully!"
          echo "Site URL: ${{ secrets.SITE_URL }}"
          echo "Build time: $(date)" 