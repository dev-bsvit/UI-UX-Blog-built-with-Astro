---
export interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<div class="comments-section" id="comments">
  <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Коментарі</h3>
  
  <!-- Форма комментария - всегда видна -->
  <div class="mb-8">
    <form id="comment-form" class="space-y-4">
      <div class="flex items-start space-x-3">
        <div id="user-avatar-container" class="w-10 h-10 rounded-full bg-gray-300 flex items-center justify-center">
          <img id="user-avatar" src="" alt="Avatar" class="w-10 h-10 rounded-full hidden">
          <svg id="default-avatar" class="w-6 h-6 text-gray-500" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
          </svg>
        </div>
        <div class="flex-1">
          <textarea
            id="comment-text"
            placeholder="Напишіть ваш коментар..."
            rows="3"
            class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-800 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 resize-none"
            required
          ></textarea>
          <div class="flex justify-between items-center mt-3">
            <span id="user-name" class="text-sm text-gray-600 dark:text-gray-400">Гість</span>
            <button
              type="submit"
              class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors font-medium"
            >
              Опублікувати
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>

  <!-- Модальное окно авторизации -->
  <div id="auth-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
    <div class="bg-white dark:bg-gray-800 rounded-lg p-6 max-w-md w-full mx-4">
      <div class="text-center">
        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-blue-100 dark:bg-blue-900 mb-4">
          <svg class="h-6 w-6 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Войдите, чтобы отправить комментарий</h3>
        <p class="text-sm text-gray-500 dark:text-gray-400 mb-6">
          Вы сможете комментировать статьи, сохранять материалы и проходить бесплатные курсы
        </p>
        <div class="flex space-x-3">
          <button
            id="auth-modal-login"
            class="flex-1 flex items-center justify-center space-x-2 px-4 py-2 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24">
              <path fill="currentColor" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="currentColor" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="currentColor" d="M5.84 14.09c-.22-.66-.35-1.33-.35-2.09s.13-1.43.35-2.09V7.07H2.18c-.7.93-1.13 2.1-1.13 3.43s.43 2.5 1.13 3.43l3.66 2.84V14.09z"/>
              <path fill="currentColor" d="M12 4.75c1.77 0 3.35.61 4.64 1.61l3.1-3.1C17.47 1.17 14.99 0 12 0 7.7 0 3.99 2.47 2.18 5.84L5.84 8.68C6.71 6.08 9.14 4.75 12 4.75z"/>
            </svg>
            <span>Увійти через Google</span>
          </button>
          <button
            id="auth-modal-cancel"
            class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
          >
            Скасувати
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Список комментариев -->
  <div id="comments-list" class="space-y-6">
    <!-- Комментарии будут добавлены динамически -->
  </div>

  <!-- Сообщение когда нет комментариев -->
  <div id="no-comments" class="text-center py-12 text-gray-500 dark:text-gray-400">
    <p class="text-lg">Поки що немає коментарів</p>
    <p class="text-sm">Станьте першим, хто залишить коментар!</p>
  </div>
</div>

<script define:vars={{ postSlug }}>
  console.log('Comments script loaded for:', postSlug);
  
  // Получаем элементы
  const commentForm = document.getElementById('comment-form');
  const commentsList = document.getElementById('comments-list');
  const noComments = document.getElementById('no-comments');
  const commentText = document.getElementById('comment-text');
  const userAvatar = document.getElementById('user-avatar');
  const defaultAvatar = document.getElementById('default-avatar');
  const userName = document.getElementById('user-name');
  const authModal = document.getElementById('auth-modal');
  const authModalLogin = document.getElementById('auth-modal-login');
  const authModalCancel = document.getElementById('auth-modal-cancel');

  // Переменная для хранения текста комментария перед авторизацией
  let pendingComment = '';

  // Проверяем авторизацию и обновляем UI
  function updateAuthUI() {
    console.log('Updating auth UI...');
    const user = localStorage.getItem('user');
    
    if (user) {
      console.log('User found:', user);
      const userData = JSON.parse(user);
      
      if (userAvatar && userData.photoURL) {
        userAvatar.src = userData.photoURL;
        userAvatar.classList.remove('hidden');
        defaultAvatar?.classList.add('hidden');
      } else {
        userAvatar?.classList.add('hidden');
        defaultAvatar?.classList.remove('hidden');
      }
      
      if (userName) {
        userName.textContent = userData.displayName || userData.email || 'Користувач';
      }
    } else {
      console.log('No user found');
      userAvatar?.classList.add('hidden');
      defaultAvatar?.classList.remove('hidden');
      if (userName) {
        userName.textContent = 'Гість';
      }
    }
  }

  // Загружаем комментарии
  function loadComments() {
    console.log('Loading comments for:', postSlug);
    const comments = JSON.parse(localStorage.getItem(`comments_${postSlug}`) || '[]');
    console.log('Found comments:', comments);
    
    if (comments.length === 0) {
      noComments?.classList.remove('hidden');
      commentsList.innerHTML = '';
      return;
    }

    noComments?.classList.add('hidden');
    
    commentsList.innerHTML = comments.map(comment => `
      <div class="flex items-start space-x-3 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
        <img src="${comment.userPhoto || ''}" alt="Avatar" class="w-10 h-10 rounded-full bg-gray-300">
        <div class="flex-1">
          <div class="flex items-center space-x-2 mb-2">
            <span class="font-medium text-gray-900 dark:text-white">${comment.userName}</span>
            <span class="text-sm text-gray-500 dark:text-gray-400">${new Date(comment.createdAt).toLocaleDateString('uk-UA')}</span>
          </div>
          <p class="text-gray-700 dark:text-gray-300 leading-relaxed">${comment.text}</p>
        </div>
      </div>
    `).join('');
  }

  // Показать модальное окно авторизации
  function showAuthModal(commentContent) {
    pendingComment = commentContent;
    authModal?.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
  }

  // Скрыть модальное окно авторизации
  function hideAuthModal() {
    authModal?.classList.add('hidden');
    document.body.style.overflow = '';
  }

  // Публикация комментария
  function publishComment(text) {
    const user = localStorage.getItem('user');
    if (!user) {
      console.log('No user for publishing comment');
      return;
    }

    const userData = JSON.parse(user);
    
    const comment = {
      id: Date.now().toString(),
      text: text,
      userName: userData.displayName || userData.email || 'Користувач',
      userPhoto: userData.photoURL || '',
      userId: userData.uid,
      createdAt: new Date().toISOString()
    };

    console.log('Publishing comment:', comment);

    // Сохраняем комментарий
    const comments = JSON.parse(localStorage.getItem(`comments_${postSlug}`) || '[]');
    comments.unshift(comment);
    localStorage.setItem(`comments_${postSlug}`, JSON.stringify(comments));

    // Очищаем форму и перезагружаем комментарии
    commentText.value = '';
    loadComments();
    
    // Обновляем счетчики комментариев на карточках
    updateCommentsCounters(postSlug, comments.length);
    
    // Очищаем отложенный комментарий
    pendingComment = '';
  }

  // Обработчик отправки формы
  commentForm?.addEventListener('submit', (e) => {
    e.preventDefault();
    console.log('Submit comment');
    
    const text = commentText.value.trim();
    if (!text) {
      alert('Введіть текст коментаря');
      return;
    }

    const user = localStorage.getItem('user');
    if (!user) {
      // Показываем модальное окно авторизации
      showAuthModal(text);
    } else {
      // Публикуем комментарий сразу
      publishComment(text);
    }
  });

  // Обработчик кнопки авторизации в модальном окне
  authModalLogin?.addEventListener('click', async () => {
    try {
      // Триггерим клик по кнопке авторизации в хедере
      const authButton = document.getElementById('login-btn');
      if (authButton) {
        authButton.click();
      }
    } catch (error) {
      console.error('Auth error:', error);
    }
  });

  // Обработчик кнопки отмены в модальном окне
  authModalCancel?.addEventListener('click', () => {
    hideAuthModal();
    pendingComment = '';
  });

  // Закрытие модального окна по клику на фон
  authModal?.addEventListener('click', (e) => {
    if (e.target === authModal) {
      hideAuthModal();
      pendingComment = '';
    }
  });

  // Обработчик изменения авторизации
  function handleAuthChange() {
    updateAuthUI();
    
    // Если есть отложенный комментарий и пользователь авторизовался
    if (pendingComment && localStorage.getItem('user')) {
      hideAuthModal();
      publishComment(pendingComment);
    }
  }

  // Инициализация
  console.log('Initializing comments...');
  updateAuthUI();
  loadComments();

  // Слушаем изменения авторизации
  window.addEventListener('storage', (e) => {
    if (e.key === 'user') {
      console.log('User storage changed');
      handleAuthChange();
    }
  });

  // Дополнительно слушаем кастомное событие авторизации
  window.addEventListener('userAuthChanged', () => {
    console.log('User auth changed event');
    handleAuthChange();
  });

  // Инициализация при загрузке страницы
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Comments script loaded for post:', postSlug);
    loadComments();
    updateAuthUI();
    
    // Проверяем, есть ли хеш #comments в URL для прокрутки
    if (window.location.hash === '#comments') {
      document.getElementById('comments')?.scrollIntoView({ behavior: 'smooth' });
    }
  });

  // Функция обновления счетчиков комментариев на карточках
  function updateCommentsCounters(postSlug, count) {
    // Обновляем счетчики на всех карточках с этим постом
    const commentsButtons = document.querySelectorAll(`.comments-button[data-post-slug="${postSlug}"]`);
    commentsButtons.forEach(button => {
      const commentsCount = button.querySelector('.comments-count');
      if (commentsCount) {
        commentsCount.textContent = count;
      }
    });
  }
</script> 