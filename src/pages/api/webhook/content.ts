import type { APIRoute } from 'astro';
import fs from 'fs/promises';
import path from 'path';
import crypto from 'crypto';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  webhookSecret: process.env.WEBHOOK_SECRET || 'your-webhook-secret',
  contentDir: path.join(process.cwd(), 'src/content/posts'),
  maxFileSize: 1024 * 1024, // 1MB
  allowedFormats: ['mdx', 'md'],
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook
 */
function verifyWebhookSignature(payload: string, signature: string): boolean {
  if (!signature || !CONFIG.webhookSecret) {
    return false;
  }

  const expectedSignature = crypto
    .createHmac('sha256', CONFIG.webhookSecret)
    .update(payload)
    .digest('hex');

  return crypto.timingSafeEqual(
    Buffer.from(`sha256=${expectedSignature}`),
    Buffer.from(signature)
  );
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è frontmatter –ø–æ—Å—Ç–∞
 */
function validatePostData(data: any): { valid: boolean; errors: string[] } {
  const errors: string[] = [];
  
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
  const requiredFields = ['title', 'description', 'publishedAt', 'author', 'tags', 'category', 'readingTime'];
  
  for (const field of requiredFields) {
    if (!data[field]) {
      errors.push(`Missing required field: ${field}`);
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤
  if (data.title && typeof data.title !== 'string') {
    errors.push('Title must be a string');
  }

  if (data.tags && !Array.isArray(data.tags)) {
    errors.push('Tags must be an array');
  }

  if (data.author && typeof data.author !== 'object') {
    errors.push('Author must be an object');
  }

  if (data.author && !data.author.name) {
    errors.push('Author name is required');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
  if (data.publishedAt) {
    const date = new Date(data.publishedAt);
    if (isNaN(date.getTime())) {
      errors.push('Invalid publishedAt date format');
    }
  }

  return {
    valid: errors.length === 0,
    errors
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
 */
function generateSlug(title: string): string {
  return title
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
    .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-') // –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ—Ñ–∏—Å—ã
    .trim();
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ MDX —Ñ–∞–π–ª–∞
 */
async function createMDXFile(data: any): Promise<{ success: boolean; filename?: string; error?: string }> {
  try {
    const { frontmatter, content, slug } = data;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const validation = validatePostData(frontmatter);
    if (!validation.valid) {
      return {
        success: false,
        error: `Validation failed: ${validation.errors.join(', ')}`
      };
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const filename = slug || generateSlug(frontmatter.title);
    const filepath = path.join(CONFIG.contentDir, `${filename}.mdx`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    try {
      await fs.access(filepath);
      return {
        success: false,
        error: `File already exists: ${filename}.mdx`
      };
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ frontmatter
    const frontmatterYaml = [
      '---',
      `title: "${frontmatter.title}"`,
      `description: "${frontmatter.description}"`,
      `publishedAt: ${frontmatter.publishedAt}`,
      frontmatter.updatedAt ? `updatedAt: ${frontmatter.updatedAt}` : '',
      'author:',
      `  name: "${frontmatter.author.name}"`,
      frontmatter.author.bio ? `  bio: "${frontmatter.author.bio}"` : '',
      frontmatter.author.social ? '  social:' : '',
      frontmatter.author.social?.twitter ? `    twitter: "${frontmatter.author.social.twitter}"` : '',
      frontmatter.author.social?.github ? `    github: "${frontmatter.author.social.github}"` : '',
      frontmatter.author.social?.website ? `    website: "${frontmatter.author.social.website}"` : '',
      `excerpt: "${frontmatter.excerpt}"`,
      frontmatter.coverImage ? `coverImage: "${frontmatter.coverImage}"` : '',
      frontmatter.coverImageAlt ? `coverImageAlt: "${frontmatter.coverImageAlt}"` : '',
      `tags: [${frontmatter.tags.map((tag: string) => `"${tag}"`).join(', ')}]`,
      `category: "${frontmatter.category}"`,
      `readingTime: "${frontmatter.readingTime}"`,
      frontmatter.featured ? `featured: ${frontmatter.featured}` : '',
      frontmatter.draft !== undefined ? `draft: ${frontmatter.draft}` : '',
      frontmatter.seo ? 'seo:' : '',
      frontmatter.seo?.metaTitle ? `  metaTitle: "${frontmatter.seo.metaTitle}"` : '',
      frontmatter.seo?.metaDescription ? `  metaDescription: "${frontmatter.seo.metaDescription}"` : '',
      frontmatter.seo?.canonicalUrl ? `  canonicalUrl: "${frontmatter.seo.canonicalUrl}"` : '',
      frontmatter.seo?.noIndex ? `  noIndex: ${frontmatter.seo.noIndex}` : '',
      frontmatter.seo?.ogImage ? `  ogImage: "${frontmatter.seo.ogImage}"` : '',
      '---',
      ''
    ].filter(line => line !== '').join('\n');

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    const fileContent = frontmatterYaml + '\n' + content;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if (Buffer.byteLength(fileContent, 'utf8') > CONFIG.maxFileSize) {
      return {
        success: false,
        error: 'File size exceeds maximum allowed size'
      };
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(CONFIG.contentDir, { recursive: true });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    await fs.writeFile(filepath, fileContent, 'utf8');

    return {
      success: true,
      filename: `${filename}.mdx`
    };

  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
 */
async function notifySuccess(filename: string) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack, Discord, email –∏ —Ç.–¥.
  console.log(`‚úÖ New post created: ${filename}`);
  
  // –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
  if (process.env.SLACK_WEBHOOK_URL) {
    try {
      const response = await fetch(process.env.SLACK_WEBHOOK_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: `üéâ –ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: ${filename}`,
          channel: '#content',
          username: 'Blog Bot'
        })
      });
      
      if (!response.ok) {
        console.warn('Failed to send Slack notification');
      }
    } catch (error) {
      console.warn('Error sending Slack notification:', error);
    }
  }
}

/**
 * POST /api/webhook/content
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ webhook
 */
export const POST: APIRoute = async ({ request }) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type
    const contentType = request.headers.get('content-type');
    if (!contentType?.includes('application/json')) {
      return new Response(
        JSON.stringify({ error: 'Content-Type must be application/json' }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const payload = await request.text();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    if (process.env.NODE_ENV === 'production') {
      const signature = request.headers.get('x-webhook-signature') || '';
      if (!verifyWebhookSignature(payload, signature)) {
        return new Response(
          JSON.stringify({ error: 'Invalid webhook signature' }),
          { 
            status: 401,
            headers: { 'Content-Type': 'application/json' }
          }
        );
      }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    let data;
    try {
      data = JSON.parse(payload);
    } catch (error) {
      return new Response(
        JSON.stringify({ error: 'Invalid JSON payload' }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!data.frontmatter || !data.content) {
      return new Response(
        JSON.stringify({ error: 'Missing required fields: frontmatter, content' }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const result = await createMDXFile(data);
    
    if (result.success) {
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await notifySuccess(result.filename!);
      
      return new Response(
        JSON.stringify({
          success: true,
          message: 'Post created successfully',
          filename: result.filename
        }),
        { 
          status: 201,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    } else {
      return new Response(
        JSON.stringify({
          success: false,
          error: result.error
        }),
        { 
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        }
      );
    }

  } catch (error) {
    console.error('Webhook error:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: 'Internal server error'
      }),
      { 
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
};

/**
 * GET /api/webhook/content
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è webhook
 */
export const GET: APIRoute = async () => {
  return new Response(
    JSON.stringify({
      status: 'ok',
      message: 'Content webhook is ready',
      timestamp: new Date().toISOString(),
      config: {
        maxFileSize: CONFIG.maxFileSize,
        allowedFormats: CONFIG.allowedFormats,
        contentDir: CONFIG.contentDir
      }
    }),
    { 
      status: 200,
      headers: { 'Content-Type': 'application/json' }
    }
  );
}; 