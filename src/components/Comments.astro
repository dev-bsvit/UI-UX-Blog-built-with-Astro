---
interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;
---

<section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
  <div class="max-w-4xl mx-auto">
    <h3 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">
      Коментарі <span id="comments-count" class="text-gray-500 dark:text-gray-400 text-lg font-normal">(0)</span>
    </h3>

    <!-- Форма добавления комментария -->
    <div class="mb-8 p-6 bg-gray-50 dark:bg-gray-800 rounded-lg">
      <div id="auth-required" class="hidden text-center py-8">
        <p class="text-gray-600 dark:text-gray-400 mb-4">
          Для додавання коментарів потрібно увійти в систему
        </p>
        <button 
          onclick="window.signInWithGoogle?.()"
          class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
        >
          Увійти через Google
        </button>
      </div>

      <form id="comment-form" class="hidden">
        <div class="mb-4">
          <label for="comment-content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Ваш коментар
          </label>
          <textarea 
            id="comment-content" 
            name="content" 
            rows="4" 
            required
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="Напишіть ваш коментар..."
          ></textarea>
        </div>

        <div class="flex justify-between items-center">
          <div class="text-sm text-gray-500 dark:text-gray-400">
            <span id="user-name-display"></span>
          </div>
          <div class="flex space-x-3">
            <button 
              type="button" 
              id="cancel-comment"
              class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
            >
              Скасувати
            </button>
            <button 
              type="submit"
              class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
            >
              Опублікувати
            </button>
          </div>
        </div>
      </form>
    </div>

    <!-- Список комментариев -->
    <div id="comments-list" class="space-y-6">
      <!-- Комментарии будут загружены динамически -->
    </div>

    <!-- Состояние загрузки -->
    <div id="comments-loading" class="text-center py-8">
      <p class="text-gray-500 dark:text-gray-400">Завантаження коментарів...</p>
    </div>

    <!-- Пустое состояние -->
    <div id="comments-empty" class="hidden text-center py-8">
      <p class="text-gray-500 dark:text-gray-400">Поки що немає коментарів. Будьте першим!</p>
    </div>
  </div>
</section>

<script define:vars={{ postSlug }}>
  document.addEventListener('DOMContentLoaded', () => {
    const commentForm = document.getElementById('comment-form');
    const authRequired = document.getElementById('auth-required');
    const commentsList = document.getElementById('comments-list');
    const commentsLoading = document.getElementById('comments-loading');
    const commentsEmpty = document.getElementById('comments-empty');
    const commentsCount = document.getElementById('comments-count');
    const userNameDisplay = document.getElementById('user-name-display');
    const cancelButton = document.getElementById('cancel-comment');
    const contentTextarea = document.getElementById('comment-content');

    let currentUser = null;
    let comments = [];

    // Проверяем авторизацию
    function checkAuth() {
      const user = JSON.parse(localStorage.getItem('user') || 'null');
      currentUser = user;
      
      if (user) {
        authRequired?.classList.add('hidden');
        commentForm?.classList.remove('hidden');
        if (userNameDisplay) {
          userNameDisplay.textContent = `Коментувати як ${user.displayName}`;
        }
      } else {
        authRequired?.classList.remove('hidden');
        commentForm?.classList.add('hidden');
      }
    }

    // Загружаем комментарии из localStorage
    function loadComments() {
      commentsLoading?.classList.remove('hidden');
      commentsEmpty?.classList.add('hidden');
      
      // Получаем комментарии из localStorage
      const allComments = JSON.parse(localStorage.getItem('comments') || '{}');
      const postComments = allComments[postSlug] || [];
      
      comments = postComments.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      
      setTimeout(() => {
        commentsLoading?.classList.add('hidden');
        renderComments();
      }, 500);
    }

    // Отображаем комментарии
    function renderComments() {
      if (!commentsList) return;

      if (comments.length === 0) {
        commentsEmpty?.classList.remove('hidden');
        commentsList.innerHTML = '';
      } else {
        commentsEmpty?.classList.add('hidden');
        commentsList.innerHTML = comments.map(comment => renderComment(comment)).join('');
      }

      // Обновляем счетчик
      if (commentsCount) {
        commentsCount.textContent = `(${comments.length})`;
      }
    }

    // Рендерим отдельный комментарий
    function renderComment(comment) {
      const date = new Date(comment.createdAt).toLocaleDateString('uk-UA', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });

      return `
        <div class="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700">
          <div class="flex items-start space-x-4">
            <div class="flex-shrink-0">
              <div class="w-10 h-10 bg-purple-600 rounded-full flex items-center justify-center">
                <span class="text-white font-medium text-sm">
                  ${comment.authorName.charAt(0).toUpperCase()}
                </span>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center space-x-2 mb-2">
                <h4 class="text-sm font-medium text-gray-900 dark:text-white">
                  ${comment.authorName}
                </h4>
                <span class="text-xs text-gray-500 dark:text-gray-400">
                  ${date}
                </span>
              </div>
              <p class="text-gray-700 dark:text-gray-300 text-sm leading-relaxed">
                ${comment.content}
              </p>
              <div class="flex items-center space-x-4 mt-3">
                <button class="like-comment-btn text-xs text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400 flex items-center space-x-1" data-comment-id="${comment.id}">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                  </svg>
                  <span class="likes-count">${comment.likesCount || 0}</span>
                </button>
                <button class="reply-btn text-xs text-gray-500 dark:text-gray-400 hover:text-purple-600 dark:hover:text-purple-400" data-comment-id="${comment.id}">
                  Відповісти
                </button>
              </div>
            </div>
          </div>
        </div>
      `;
    }

    // Добавляем новый комментарий
    async function addComment(content) {
      if (!currentUser) {
        alert('Потрібно увійти в систему для додавання коментарів');
        return;
      }

      const newComment = {
        id: Math.random().toString(36).substring(2) + Date.now().toString(36),
        postSlug: postSlug,
        content: content.trim(),
        authorName: currentUser.displayName,
        authorEmail: currentUser.email,
        createdAt: new Date().toISOString(),
        approved: true,
        likesCount: 0
      };

      // Сохраняем в localStorage
      const allComments = JSON.parse(localStorage.getItem('comments') || '{}');
      if (!allComments[postSlug]) {
        allComments[postSlug] = [];
      }
      allComments[postSlug].push(newComment);
      localStorage.setItem('comments', JSON.stringify(allComments));

      // Обновляем локальный массив и перерендериваем
      comments.push(newComment);
      renderComments();

      // Очищаем форму
      if (contentTextarea) {
        contentTextarea.value = '';
      }

      return newComment;
    }

    // Обработчик отправки формы
    commentForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(commentForm);
      const content = formData.get('content')?.toString().trim();
      
      if (!content) {
        alert('Будь ласка, введіть текст коментаря');
        return;
      }

      try {
        await addComment(content);
      } catch (error) {
        console.error('Error adding comment:', error);
        alert('Помилка при додаванні коментаря');
      }
    });

    // Обработчик кнопки отмены
    cancelButton?.addEventListener('click', () => {
      if (contentTextarea) {
        contentTextarea.value = '';
      }
    });

    // Обработчики лайков комментариев (делегирование событий)
    commentsList?.addEventListener('click', (e) => {
      if (e.target.closest('.like-comment-btn')) {
        const button = e.target.closest('.like-comment-btn');
        const commentId = button.dataset.commentId;
        const likesCountElement = button.querySelector('.likes-count');
        
        if (!currentUser) {
          alert('Потрібно увійти в систему');
          return;
        }

        // Получаем лайки пользователя
        const userLikes = JSON.parse(localStorage.getItem(`user_comment_likes_${currentUser.uid}`) || '[]');
        const isLiked = userLikes.includes(commentId);
        
        // Получаем общие лайки
        const allLikes = JSON.parse(localStorage.getItem('all_comment_likes') || '{}');
        
        if (isLiked) {
          // Убираем лайк
          const updatedUserLikes = userLikes.filter(id => id !== commentId);
          const updatedAllLikes = { ...allLikes };
          updatedAllLikes[commentId] = Math.max(0, (updatedAllLikes[commentId] || 0) - 1);
          
          localStorage.setItem(`user_comment_likes_${currentUser.uid}`, JSON.stringify(updatedUserLikes));
          localStorage.setItem('all_comment_likes', JSON.stringify(updatedAllLikes));
          
          button.classList.remove('liked');
          if (likesCountElement) {
            likesCountElement.textContent = updatedAllLikes[commentId].toString();
          }
        } else {
          // Добавляем лайк
          const updatedUserLikes = [...userLikes, commentId];
          const updatedAllLikes = { ...allLikes };
          updatedAllLikes[commentId] = (updatedAllLikes[commentId] || 0) + 1;
          
          localStorage.setItem(`user_comment_likes_${currentUser.uid}`, JSON.stringify(updatedUserLikes));
          localStorage.setItem('all_comment_likes', JSON.stringify(updatedAllLikes));
          
          button.classList.add('liked');
          if (likesCountElement) {
            likesCountElement.textContent = updatedAllLikes[commentId].toString();
          }
        }
      }
    });

    // Слушаем изменения авторизации
    window.addEventListener('userAuthChanged', () => {
      checkAuth();
    });

    // Инициализация
    checkAuth();
    loadComments();
  });
</script>

<style>
  .liked {
    color: #dc2626 !important;
  }
  
  .liked svg {
    fill: currentColor;
  }
</style> 