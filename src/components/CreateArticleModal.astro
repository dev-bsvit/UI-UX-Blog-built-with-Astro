---
// CreateArticleModal.astro
---

<!-- Модальное окно для создания статьи -->
<div id="createArticleModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white dark:bg-gray-800 rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
    <div class="p-6">
      <div class="flex justify-between items-center mb-6">
        <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Створити статтю</h2>
        <button id="closeModal" class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <form id="articleForm" class="space-y-4">
        <div>
          <label for="title" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Заголовок статті *
          </label>
          <input 
            type="text" 
            id="title" 
            name="title" 
            required
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="Введіть заголовок статті"
          />
        </div>

        <div>
          <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Короткий опис
          </label>
          <textarea 
            id="description" 
            name="description" 
            rows="2"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="Короткий опис статті"
          ></textarea>
        </div>

        <div>
          <label for="content" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            Контент статті *
          </label>
          <textarea 
            id="content" 
            name="content" 
            rows="8" 
            required
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="Введіть контент статті в форматі Markdown"
          ></textarea>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="tags" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Теги
            </label>
            <input 
              type="text" 
              id="tags" 
              name="tags"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
              placeholder="дизайн, ux, ui (через кому)"
            />
          </div>

          <div>
            <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Категорія
            </label>
            <select 
              id="category" 
              name="category"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            >
              <option value="Design">Дизайн</option>
              <option value="Research">Дослідження</option>
              <option value="Development">Розробка</option>
              <option value="Tools">Інструменти</option>
              <option value="General">Загальне</option>
            </select>
          </div>
        </div>

        <div>
          <label for="cover" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
            URL обкладинки
          </label>
          <input 
            type="url" 
            id="cover" 
            name="cover"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
            placeholder="https://example.com/image.jpg"
          />
        </div>

        <div class="flex justify-end space-x-4 pt-4">
          <button 
            type="button" 
            id="cancelButton"
            class="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
          >
            Скасувати
          </button>
          <button 
            type="submit"
            class="px-6 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg font-medium transition-colors"
          >
            Опублікувати
          </button>
        </div>
      </form>

      <!-- Результат создания статьи -->
      <div id="articleResult" class="hidden mt-6 p-4 border rounded-lg">
        <h3 class="font-bold mb-2">Результат створення статті:</h3>
        <div id="resultContent"></div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('createArticleModal');
    const form = document.getElementById('articleForm');
    const closeModalBtn = document.getElementById('closeModal');
    const cancelBtn = document.getElementById('cancelButton');
    const resultDiv = document.getElementById('articleResult');
    const resultContent = document.getElementById('resultContent');

    // Функция для открытия модала
    window.openModal = function() {
      console.log('openModal called');
      
      // Проверяем авторизацию
      const user = JSON.parse(localStorage.getItem('user') || 'null');
      console.log('User from localStorage:', user);
      
      if (!user) {
        alert('Для публікації статей потрібно увійти в систему через Google');
        return;
      }
      
      if (modal) {
        modal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    };

    // Функция для показа инструкций
    function showArticleInstructions(result: any) {
      if (resultContent) {
        resultContent.innerHTML = `
          <div class="text-green-600 dark:text-green-400">
            <p class="font-medium">✅ ${result.message}</p>
            <div class="mt-4">
              <h4 class="font-medium mb-2">Інструкції:</h4>
              <ol class="list-decimal list-inside text-sm space-y-1">
                ${result.instructions.map((instruction: string) => `<li>${instruction}</li>`).join('')}
              </ol>
            </div>
            <div class="mt-4 p-3 bg-gray-100 dark:bg-gray-700 rounded text-xs">
              <strong>Ім'я файлу:</strong> ${result.fileName}
            </div>
          </div>
        `;
      }
      resultDiv?.classList.remove('hidden');
      
      // Закрываем модал через 5 секунд
      setTimeout(() => {
        closeModal();
      }, 5000);
    }

    // Функция для закрытия модала
    function closeModal() {
      if (modal) {
        modal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        form?.reset();
        resultDiv?.classList.add('hidden');
      }
    }

    // Обработчики закрытия модала
    closeModalBtn?.addEventListener('click', closeModal);
    cancelBtn?.addEventListener('click', closeModal);
    
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Обработка отправки формы
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(form as HTMLFormElement);
      const data = {
        title: formData.get('title') as string,
        content: formData.get('content') as string,
        excerpt: formData.get('description') as string,
        tags: (formData.get('tags') as string)?.split(',').map(tag => tag.trim()).filter(tag => tag),
        category: formData.get('category') as string,
        coverImage: formData.get('cover') as string
      };

      try {
        console.log('Creating article locally:', data);

        // Генерируем slug и время чтения
        const slug = generateSlug(data.title) + '-' + Date.now();
        const readingTime = calculateReadingTime(data.content);
        
        // Создаем frontmatter для MDX файла
        const frontmatter = `---
title: "${data.title}"
description: "${data.excerpt || data.content.substring(0, 200).replace(/"/g, '\\"')}"
publishedAt: ${new Date().toISOString()}
author:
  name: "Автор блогу"
  bio: "Автор статей блогу"
  avatar: "/logo.svg"
excerpt: "${data.excerpt || data.content.substring(0, 200).replace(/"/g, '\\"')}"
tags: [${data.tags ? data.tags.map((tag: string) => `"${tag}"`).join(', ') : ''}]
category: "${data.category || 'Общее'}"
readingTime: "${readingTime} хв читання"
featured: false
cover: "${data.coverImage || '/images/posts/default.png'}"
draft: false
---

${data.content}`;

        // Создаем и скачиваем файл
        const blob = new Blob([frontmatter], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${slug}.mdx`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        // Показываем инструкции
        showArticleInstructions({
          success: true,
          fileCreated: false,
          message: 'Файл статті готовий до завантаження',
          slug,
          fileName: `${slug}.mdx`,
          instructions: [
            '1. Файл автоматично завантажився на ваш комп\'ютер',
            '2. Помістіть файл в папку src/content/posts/ вашого проекту',
            '3. Зробіть commit і push в GitHub',
            '4. Ваша стаття з\'явиться на сайті після деплою!',
            '5. Не забудьте додати зображення в public/images/posts/ (якщо потрібно)'
          ]
        });

      } catch (error) {
        console.error('Error creating article:', error);
        if (window.showNotification) {
          window.showNotification('Помилка при створенні статті', false);
        } else {
          alert('Помилка при створенні статті');
        }
      }
    });

    // Функции для генерации slug и времени чтения
    function generateSlug(title: string): string {
      return title
        .toLowerCase()
        .replace(/[^a-z0-9\u0400-\u04ff\s-]/g, '')
        .replace(/\s+/g, '-')
        .replace(/-+/g, '-')
        .trim()
        .slice(0, 50);
    }

    function calculateReadingTime(content: string): number {
      const wordsPerMinute = 200;
      const words = content.split(/\s+/).length;
      return Math.ceil(words / wordsPerMinute);
    }
  }); // Закрывающая скобка для DOMContentLoaded
</script>

<style>
  /* Анимации для модального окна */
  #createArticleModal {
    animation: fadeIn 0.3s ease-out;
  }

  #createArticleModal > div {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideIn {
    from { 
      opacity: 0; 
      transform: translateY(-20px) scale(0.95);
    }
    to { 
      opacity: 1; 
      transform: translateY(0) scale(1);
    }
  }

  /* Стили для скроллбара */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }

  .overflow-y-auto::-webkit-scrollbar-track {
    background: transparent;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 3px;
  }

  .dark .overflow-y-auto::-webkit-scrollbar-thumb {
    background: #4b5563;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }

  .dark .overflow-y-auto::-webkit-scrollbar-thumb:hover {
    background: #6b7280;
  }
</style> 