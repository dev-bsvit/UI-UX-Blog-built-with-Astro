---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Comments from '../../components/Comments.astro';

// Генерируем статические пути для всех постов
export async function getStaticPaths() {
  const posts = await getCollection('posts', ({ data }) => {
    return !data.draft;
  });
  
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Получаем данные поста
type Props = {
  post: CollectionEntry<'posts'>;
};

const { post } = Astro.props;
const { Content } = await post.render();

// Парсим теги
const tags = post.data.tags || [];

// Подготавливаем данные для SEO
const title = `${post.data.title} | UI/UX Блог`;
const description = post.data.excerpt || post.data.description;
const canonicalURL = new URL(`/posts/${post.slug}`, Astro.site);
const ogImage = post.data.cover || new URL('/og-image.jpg', Astro.site);

// Форматируем дату
const publishedDate = new Date(post.data.publishedAt).toLocaleDateString('uk-UA', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<BaseLayout 
  title={title}
  description={description}
  image={post.data.cover}
  canonicalURL={canonicalURL}
  article={true}
  author={post.data.author?.name}
  publishedAt={post.data.publishedAt}
  modifiedAt={post.data.modifiedAt}
  tags={tags}
  category={post.data.category}
>
  <main class="max-w-4xl mx-auto px-4 py-8">
    <!-- Breadcrumbs -->
    <nav class="text-sm text-gray-600 dark:text-gray-400 mb-6">
      <a href="/" class="hover:text-purple-600 dark:hover:text-purple-400">Головна</a>
      <span class="mx-2">→</span>
      <a href="/posts" class="hover:text-purple-600 dark:hover:text-purple-400">Статті</a>
      <span class="mx-2">→</span>
      <span class="text-gray-900 dark:text-white">{post.data.title}</span>
    </nav>

    <article class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
      <div class="p-8 md:p-12">
        <header class="mb-8">
          <h1 class="text-4xl font-bold text-gray-900 dark:text-white mb-4">
            {post.data.title}
          </h1>
          
          <!-- Мета информация -->
          <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mb-6">
            <time datetime={post.data.publishedAt}>
              {publishedDate}
            </time>
            <span>•</span>
            <span>{post.data.readingTime}</span>
            <span>•</span>
            <span class="views-count">0 переглядів</span>
            {post.data.category && (
              <>
                <span>•</span>
                <span class="px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded">
                  {post.data.category}
                </span>
              </>
            )}
          </div>

          <!-- Теги -->
          {tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-6">
              {tags.map(tag => (
                <span class="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full text-sm">
                  #{tag}
                </span>
              ))}
            </div>
          )}

          <!-- Обложка -->
          {post.data.cover && (
            <div class="mb-8">
              <img 
                src={post.data.cover} 
                alt={post.data.title}
                class="w-full h-64 object-cover rounded-lg"
                loading="eager"
              />
            </div>
          )}
        </header>

        <!-- Контент статьи -->
        <div class="prose prose-lg dark:prose-invert max-w-none">
          <Content />
        </div>
        
        <!-- Действия с постом -->
        <div class="flex flex-wrap items-center justify-between gap-4 mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
          <div class="flex items-center space-x-4">
            <button 
              class="like-button flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-colors"
              data-post-slug={post.slug}
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
              </svg>
              <span class="likes-count">0</span>
            </button>

            <button 
              class="bookmark-button flex items-center space-x-2 px-4 py-2 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-colors"
              data-post-slug={post.slug}
            >
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
              </svg>
              <span class="bookmarks-count">0</span>
            </button>
          </div>

          <button 
            class="share-button flex items-center space-x-2 px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-lg transition-colors"
            data-url={canonicalURL}
            data-title={post.data.title}
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
            </svg>
            <span>Поділитися</span>
          </button>
        </div>
      </div>
    </article>

    <!-- Комментарии -->
    <Comments postSlug={post.slug} />
  </main>
</BaseLayout>

<script>
  // Увеличиваем счетчик просмотров
  document.addEventListener('DOMContentLoaded', () => {
    const slug = window.location.pathname.split('/').pop();
    if (slug) {
      const views = JSON.parse(localStorage.getItem('post_views') || '{}');
      views[slug] = (views[slug] || 0) + 1;
      localStorage.setItem('post_views', JSON.stringify(views));
      
      const viewsElement = document.querySelector('.views-count');
      if (viewsElement) {
        viewsElement.textContent = `${views[slug]} переглядів`;
      }
    }
  });

  // Обработка лайков
  document.querySelector('.like-button')?.addEventListener('click', async (e) => {
    const button = e.currentTarget as HTMLButtonElement;
    const postSlug = button.dataset.postSlug;
    const likesCount = button.querySelector('.likes-count');
    
    if (!postSlug) return;
    
    const user = JSON.parse(localStorage.getItem('user') || 'null');
    if (!user) {
      alert('Для лайків нужно войти в систему');
      return;
    }
    
    const userLikes = JSON.parse(localStorage.getItem(`user_likes_${user.uid}`) || '[]');
    const allLikes = JSON.parse(localStorage.getItem('all_likes') || '{}');
    
    const isLiked = userLikes.includes(postSlug);
    
    if (isLiked) {
      // Убираем лайк
      const updatedUserLikes = userLikes.filter((slug: string) => slug !== postSlug);
      const updatedAllLikes = { ...allLikes };
      updatedAllLikes[postSlug] = Math.max(0, (updatedAllLikes[postSlug] || 0) - 1);
      
      localStorage.setItem(`user_likes_${user.uid}`, JSON.stringify(updatedUserLikes));
      localStorage.setItem('all_likes', JSON.stringify(updatedAllLikes));
      
      button.classList.remove('liked');
      if (likesCount) {
        likesCount.textContent = updatedAllLikes[postSlug].toString();
      }
    } else {
      // Добавляем лайк
      const updatedUserLikes = [...userLikes, postSlug];
      const updatedAllLikes = { ...allLikes };
      updatedAllLikes[postSlug] = (updatedAllLikes[postSlug] || 0) + 1;
      
      localStorage.setItem(`user_likes_${user.uid}`, JSON.stringify(updatedUserLikes));
      localStorage.setItem('all_likes', JSON.stringify(updatedAllLikes));
      
      button.classList.add('liked');
      if (likesCount) {
        likesCount.textContent = updatedAllLikes[postSlug].toString();
      }
    }
  });

  // Обработка закладок
  document.querySelector('.bookmark-button')?.addEventListener('click', async (e) => {
    const button = e.currentTarget as HTMLButtonElement;
    const postSlug = button.dataset.postSlug;
    
    if (!postSlug) return;
    
    const user = JSON.parse(localStorage.getItem('user') || 'null');
    if (!user) {
      alert('Для закладок нужно войти в систему');
      return;
    }
    
    const userBookmarks = JSON.parse(localStorage.getItem(`user_bookmarks_${user.uid}`) || '[]');
    const isBookmarked = userBookmarks.includes(postSlug);
    
    if (isBookmarked) {
      // Убираем из закладок
      const updatedBookmarks = userBookmarks.filter((slug: string) => slug !== postSlug);
      localStorage.setItem(`user_bookmarks_${user.uid}`, JSON.stringify(updatedBookmarks));
      
      const span = button.querySelector('span:last-child');
      if (span) {
        span.textContent = 'Зберегти';
      }
    } else {
      // Добавляем в закладки
      const updatedBookmarks = [...userBookmarks, postSlug];
      localStorage.setItem(`user_bookmarks_${user.uid}`, JSON.stringify(updatedBookmarks));
      
      const span = button.querySelector('span:last-child');
      if (span) {
        span.textContent = 'Збережено';
      }
    }
  });

  // Обработка поделиться
  document.querySelector('.share-button')?.addEventListener('click', (e) => {
    const button = e.currentTarget as HTMLButtonElement;
    const url = button.dataset.url;
    const title = button.dataset.title;
    
    if (navigator.share) {
      navigator.share({
        title: title,
        url: url
      });
    } else {
      // Fallback - копируем в буфер обмена
      navigator.clipboard.writeText(url || '');
      const span = button.querySelector('span:last-child');
      if (span) {
        const originalText = span.textContent;
        span.textContent = 'Скопійовано!';
        setTimeout(() => {
          span.textContent = originalText;
        }, 2000);
      }
    }
  });
</script> 