#!/usr/bin/env node

/**
 * Google Indexing API Script
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç Google –æ –Ω–æ–≤—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
 */

import { google } from 'googleapis';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  siteUrl: process.env.SITE_URL || 'https://your-domain.com',
  serviceAccountKey: process.env.GOOGLE_SERVICE_ACCOUNT_KEY,
  maxRequestsPerBatch: 100,
  requestDelayMs: 1000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
};

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API –∫–ª–∏–µ–Ω—Ç–∞
 */
async function initializeGoogleAuth() {
  try {
    if (!CONFIG.serviceAccountKey) {
      throw new Error('GOOGLE_SERVICE_ACCOUNT_KEY environment variable is required');
    }

    const credentials = JSON.parse(
      Buffer.from(CONFIG.serviceAccountKey, 'base64').toString('utf-8')
    );

    const jwtClient = new google.auth.JWT(
      credentials.client_email,
      null,
      credentials.private_key,
      ['https://www.googleapis.com/auth/indexing']
    );

    await jwtClient.authorize();
    
    console.log('‚úÖ Google API authentication successful');
    return google.indexing({ version: 'v3', auth: jwtClient });
  } catch (error) {
    console.error('‚ùå Google API authentication failed:', error.message);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö URL –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
 */
async function getAllUrls() {
  const urls = [];
  
  try {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const staticPages = [
      '',
      '/about',
      '/posts',
      '/categories',
      '/tags'
    ];

    staticPages.forEach(page => {
      urls.push({
        url: `${CONFIG.siteUrl}${page}`,
        type: 'URL_UPDATED'
      });
    });

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ content/posts
    const postsDir = path.join(__dirname, '../src/content/posts');
    
    try {
      const postFiles = await fs.readdir(postsDir);
      const mdxFiles = postFiles.filter(file => file.endsWith('.mdx'));
      
      for (const file of mdxFiles) {
        const slug = file.replace('.mdx', '');
        urls.push({
          url: `${CONFIG.siteUrl}/posts/${slug}`,
          type: 'URL_UPDATED'
        });
      }
      
      console.log(`üìÑ Found ${mdxFiles.length} blog posts to index`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not read posts directory:', error.message);
    }

    // RSS –∏ Sitemap
    urls.push(
      {
        url: `${CONFIG.siteUrl}/rss.xml`,
        type: 'URL_UPDATED'
      },
      {
        url: `${CONFIG.siteUrl}/sitemap-index.xml`,
        type: 'URL_UPDATED'
      }
    );

    console.log(`üîó Total URLs to index: ${urls.length}`);
    return urls;
  } catch (error) {
    console.error('‚ùå Error getting URLs:', error.message);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ URL –≤ Google Indexing API
 */
async function submitUrlToGoogle(indexingService, urlData) {
  try {
    const response = await indexingService.urlNotifications.publish({
      requestBody: urlData
    });

    if (response.status === 200) {
      console.log(`‚úÖ Successfully indexed: ${urlData.url}`);
      return { success: true, url: urlData.url };
    } else {
      console.warn(`‚ö†Ô∏è Unexpected response for ${urlData.url}:`, response.status);
      return { success: false, url: urlData.url, error: response.status };
    }
  } catch (error) {
    console.error(`‚ùå Failed to index ${urlData.url}:`, error.message);
    return { success: false, url: urlData.url, error: error.message };
  }
}

/**
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ URL —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
 */
async function submitUrlsBatch(indexingService, urls) {
  const results = [];
  const batches = [];
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏
  for (let i = 0; i < urls.length; i += CONFIG.maxRequestsPerBatch) {
    batches.push(urls.slice(i, i + CONFIG.maxRequestsPerBatch));
  }

  console.log(`üì¶ Processing ${batches.length} batches...`);

  for (let batchIndex = 0; batchIndex < batches.length; batchIndex++) {
    const batch = batches[batchIndex];
    console.log(`\nüîÑ Processing batch ${batchIndex + 1}/${batches.length} (${batch.length} URLs)`);

    for (const urlData of batch) {
      const result = await submitUrlToGoogle(indexingService, urlData);
      results.push(result);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
      if (CONFIG.requestDelayMs > 0) {
        await new Promise(resolve => setTimeout(resolve, CONFIG.requestDelayMs));
      }
    }

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
    if (batchIndex < batches.length - 1) {
      console.log(`‚è≥ Waiting before next batch...`);
      await new Promise(resolve => setTimeout(resolve, CONFIG.requestDelayMs * 2));
    }
  }

  return results;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ URL
 */
async function getIndexingStatus(indexingService, url) {
  try {
    const response = await indexingService.urlNotifications.getMetadata({
      url: url
    });
    
    return {
      url: url,
      lastUpdateTime: response.data.latestUpdate?.notifyTime,
      status: 'indexed'
    };
  } catch (error) {
    return {
      url: url,
      status: 'not_found',
      error: error.message
    };
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
 */
function generateReport(results) {
  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);
  
  const report = {
    timestamp: new Date().toISOString(),
    total: results.length,
    successful: successful.length,
    failed: failed.length,
    successRate: ((successful.length / results.length) * 100).toFixed(2),
    results: results
  };

  console.log('\nüìä INDEXING REPORT');
  console.log('==================');
  console.log(`Total URLs: ${report.total}`);
  console.log(`Successful: ${report.successful}`);
  console.log(`Failed: ${report.failed}`);
  console.log(`Success Rate: ${report.successRate}%`);
  
  if (failed.length > 0) {
    console.log('\n‚ùå Failed URLs:');
    failed.forEach(f => console.log(`  - ${f.url}: ${f.error}`));
  }

  return report;
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
 */
async function saveReport(report) {
  try {
    const reportsDir = path.join(__dirname, '../reports');
    await fs.mkdir(reportsDir, { recursive: true });
    
    const filename = `indexing-report-${new Date().toISOString().slice(0, 10)}.json`;
    const filepath = path.join(reportsDir, filename);
    
    await fs.writeFile(filepath, JSON.stringify(report, null, 2));
    console.log(`üíæ Report saved to: ${filepath}`);
  } catch (error) {
    console.error('‚ùå Failed to save report:', error.message);
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö URL
 */
async function checkIndexingStatus(indexingService, urls) {
  console.log('\nüîç Checking indexing status...');
  
  const statuses = [];
  for (const url of urls.slice(0, 5)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    const status = await getIndexingStatus(indexingService, url);
    statuses.push(status);
    console.log(`${status.status === 'indexed' ? '‚úÖ' : '‚ùì'} ${url}: ${status.status}`);
  }
  
  return statuses;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  try {
    console.log('üöÄ Starting Google Indexing process...\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google API
    const indexingService = await initializeGoogleAuth();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö URL
    const urls = await getAllUrls();
    
    if (urls.length === 0) {
      console.log('‚ö†Ô∏è No URLs found to index');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ URL –≤ Google
    console.log('\nüì§ Submitting URLs to Google Indexing API...');
    const results = await submitUrlsBatch(indexingService, urls);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    const report = generateReport(results);
    await saveReport(report);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.env.CHECK_STATUS === 'true') {
      await checkIndexingStatus(indexingService, urls.map(u => u.url));
    }
    
    console.log('\nüéâ Google Indexing process completed!');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const failedCount = results.filter(r => !r.success).length;
    if (failedCount > 0) {
      console.log(`‚ö†Ô∏è ${failedCount} URLs failed to index`);
      process.exit(1);
    }
    
  } catch (error) {
    console.error('üí• Fatal error:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main(); 